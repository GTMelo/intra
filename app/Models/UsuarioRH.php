<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;

class UsuarioRH extends Model
{
    protected $table = 'usuarios_rh';
    protected $primaryKey = 'user_id';
    public $incrementing = false;
    public $timestamps = false;
    protected $dates = ['data_nascimento'];
    protected $with = ['cargo', 'unidade'];

    protected $fillable = [
        'user_id', 'nome_completo', 'nome_curto', 'cargo_id', 'escolaridade_id', 'siape', 'data_nascimento', 'sexo'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function unidade()
    {
        return $this->belongsTo(Unidade::class);
    }

    public function cargo()
    {
        return $this->belongsTo(Cargo::class);
    }

    public function escolaridade()
    {
        return $this->belongsTo(Escolaridade::class);
    }

    /**
     * Retorna se o aniversário do usuário cai dentro das datas
     *
     * @param $rangeStart Int negativo quantos dias no passado
     * @param $rangeStop Int positivo quantos dias no futuro
     * @return boolean
     */
    public function isAniversarioInRange($rangeStart, $rangeStop)
       //TODO mover este método pra uma classe Helper. Algo como DateHelper ou coisa assim
    {
        $date = $this->data_nascimento;
        return isDayMonthInRange($date, $rangeStart, $rangeStop);
    }

    public static function getListaAniversariantes($rangeStart, $rangeStop)
    {
        $result = new Collection([]);
        $usuarios = UsuarioRH::orderByRaw('MONTH(usuarios_rh.data_nascimento),DAY(usuarios_rh.data_nascimento)')->get();

        foreach ($usuarios as $item) {
            if($item->isAniversarioInRange($rangeStart, $rangeStop) && !isset($item->user->deleted_at)){
                $result->push($item);
            };
        }

        return $result;
    }
}
